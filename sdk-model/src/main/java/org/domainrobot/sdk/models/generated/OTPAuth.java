/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.validation.constraints.*;

import org.domainrobot.sdk.models.generated.BasicDocument;
import org.domainrobot.sdk.models.generated.BasicUser;
import org.domainrobot.sdk.models.generated.CryptoFormatConstants;
import org.domainrobot.sdk.models.generated.ProtocolTypeConstants;

import javax.validation.Valid;

/**
 * OTPAuth
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-08T13:30:26.488+01:00")
public class OTPAuth {
  @JsonProperty("created")
  private Date created = null;

  @JsonProperty("updated")
  private Date updated = null;

  @JsonProperty("owner")
  private BasicUser owner = null;

  @JsonProperty("updater")
  private BasicUser updater = null;

  @JsonProperty("protocolType")
  private ProtocolTypeConstants protocolType = null;

  @JsonProperty("algorithm")
  private CryptoFormatConstants algorithm = null;

  @JsonProperty("timeout")
  private Integer timeout = null;

  @JsonProperty("digits")
  private Integer digits = null;

  @JsonProperty("secret")
  private String secret = null;

  @JsonProperty("tokens")
  private List<String> tokens = null;

  @JsonProperty("qrCode")
  private BasicDocument qrCode = null;

  public OTPAuth created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The created date.
   * @return created
  **/
  @Valid
  @ApiModelProperty(value = "The created date.")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public OTPAuth updated(Date updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The updated date.
   * @return updated
  **/
  @Valid
  @ApiModelProperty(value = "The updated date.")
  public Date getUpdated() {
    return updated;
  }

  public void setUpdated(Date updated) {
    this.updated = updated;
  }

  public OTPAuth owner(BasicUser owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the object.
   * @return owner
  **/
  @Valid
  @ApiModelProperty(value = "The owner of the object.")
  public BasicUser getOwner() {
    return owner;
  }

  public void setOwner(BasicUser owner) {
    this.owner = owner;
  }

  public OTPAuth updater(BasicUser updater) {
    this.updater = updater;
    return this;
  }

   /**
   * The updating user of the object.
   * @return updater
  **/
  @Valid
  @ApiModelProperty(value = "The updating user of the object.")
  public BasicUser getUpdater() {
    return updater;
  }

  public void setUpdater(BasicUser updater) {
    this.updater = updater;
  }

  public OTPAuth protocolType(ProtocolTypeConstants protocolType) {
    this.protocolType = protocolType;
    return this;
  }

   /**
   * The type of protocol
   * @return protocolType
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The type of protocol")
  public ProtocolTypeConstants getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(ProtocolTypeConstants protocolType) {
    this.protocolType = protocolType;
  }

  public OTPAuth algorithm(CryptoFormatConstants algorithm) {
    this.algorithm = algorithm;
    return this;
  }

   /**
   * Crypto algorithm
   * @return algorithm
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Crypto algorithm")
  public CryptoFormatConstants getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(CryptoFormatConstants algorithm) {
    this.algorithm = algorithm;
  }

  public OTPAuth timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Timeout in seconds
   * minimum: 5
   * maximum: 90
   * @return timeout
  **/
  @NotNull
 @Min(5) @Max(90)  @ApiModelProperty(required = true, value = "Timeout in seconds")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public OTPAuth digits(Integer digits) {
    this.digits = digits;
    return this;
  }

   /**
   * The length of the token
   * @return digits
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The length of the token")
  public Integer getDigits() {
    return digits;
  }

  public void setDigits(Integer digits) {
    this.digits = digits;
  }

  public OTPAuth secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * Base32 encoded shared secret.
   * @return secret
  **/
  @ApiModelProperty(value = "Base32 encoded shared secret.")
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }

  public OTPAuth tokens(List<String> tokens) {
    this.tokens = tokens;
    return this;
  }

  public OTPAuth addTokensItem(String tokensItem) {
    if (this.tokens == null) {
      this.tokens = new ArrayList<String>();
    }
    this.tokens.add(tokensItem);
    return this;
  }

   /**
   * The generated support &#39;tokens&#39;.
   * @return tokens
  **/
  @ApiModelProperty(value = "The generated support 'tokens'.")
  public List<String> getTokens() {
    return tokens;
  }

  public void setTokens(List<String> tokens) {
    this.tokens = tokens;
  }

  public OTPAuth qrCode(BasicDocument qrCode) {
    this.qrCode = qrCode;
    return this;
  }

   /**
   * The generated qr code png.
   * @return qrCode
  **/
  @Valid
  @ApiModelProperty(value = "The generated qr code png.")
  public BasicDocument getQrCode() {
    return qrCode;
  }

  public void setQrCode(BasicDocument qrCode) {
    this.qrCode = qrCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OTPAuth otPAuth = (OTPAuth) o;
    return Objects.equals(this.created, otPAuth.created) &&
        Objects.equals(this.updated, otPAuth.updated) &&
        Objects.equals(this.owner, otPAuth.owner) &&
        Objects.equals(this.updater, otPAuth.updater) &&
        Objects.equals(this.protocolType, otPAuth.protocolType) &&
        Objects.equals(this.algorithm, otPAuth.algorithm) &&
        Objects.equals(this.timeout, otPAuth.timeout) &&
        Objects.equals(this.digits, otPAuth.digits) &&
        Objects.equals(this.secret, otPAuth.secret) &&
        Objects.equals(this.tokens, otPAuth.tokens) &&
        Objects.equals(this.qrCode, otPAuth.qrCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, owner, updater, protocolType, algorithm, timeout, digits, secret, tokens, qrCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OTPAuth {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    digits: ").append(toIndentedString(digits)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("    qrCode: ").append(toIndentedString(qrCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

