/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * DomainTmchClaimNoticeExtensions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-13T13:06:11.008+01:00")
public class DomainTmchClaimNoticeExtensions {
  @JsonProperty("externalReference")
  private String externalReference = null;

  @JsonProperty("notAfter")
  private Date notAfter = null;

  @JsonProperty("confirmed")
  private Date confirmed = null;

  @JsonProperty("confirmIp")
  private String confirmIp = null;

  public DomainTmchClaimNoticeExtensions externalReference(String externalReference) {
    this.externalReference = externalReference;
    return this;
  }

   /**
   * The external refernce
   * @return externalReference
  **/
  @ApiModelProperty(value = "The external refernce")
  public String getExternalReference() {
    return externalReference;
  }

  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }

  public DomainTmchClaimNoticeExtensions notAfter(Date notAfter) {
    this.notAfter = notAfter;
    return this;
  }

   /**
   * Date after the claim expires
   * @return notAfter
  **/
  @Valid
  @ApiModelProperty(value = "Date after the claim expires")
  public Date getNotAfter() {
    return notAfter;
  }

  public void setNotAfter(Date notAfter) {
    this.notAfter = notAfter;
  }

  public DomainTmchClaimNoticeExtensions confirmed(Date confirmed) {
    this.confirmed = confirmed;
    return this;
  }

   /**
   * The date of confirmation
   * @return confirmed
  **/
  @Valid
  @ApiModelProperty(value = "The date of confirmation")
  public Date getConfirmed() {
    return confirmed;
  }

  public void setConfirmed(Date confirmed) {
    this.confirmed = confirmed;
  }

  public DomainTmchClaimNoticeExtensions confirmIp(String confirmIp) {
    this.confirmIp = confirmIp;
    return this;
  }

   /**
   * The confirm ip
   * @return confirmIp
  **/
  @ApiModelProperty(value = "The confirm ip")
  public String getConfirmIp() {
    return confirmIp;
  }

  public void setConfirmIp(String confirmIp) {
    this.confirmIp = confirmIp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainTmchClaimNoticeExtensions domainTmchClaimNoticeExtensions = (DomainTmchClaimNoticeExtensions) o;
    return Objects.equals(this.externalReference, domainTmchClaimNoticeExtensions.externalReference) &&
        Objects.equals(this.notAfter, domainTmchClaimNoticeExtensions.notAfter) &&
        Objects.equals(this.confirmed, domainTmchClaimNoticeExtensions.confirmed) &&
        Objects.equals(this.confirmIp, domainTmchClaimNoticeExtensions.confirmIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalReference, notAfter, confirmed, confirmIp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainTmchClaimNoticeExtensions {\n");
    
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    notAfter: ").append(toIndentedString(notAfter)).append("\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    confirmIp: ").append(toIndentedString(confirmIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

