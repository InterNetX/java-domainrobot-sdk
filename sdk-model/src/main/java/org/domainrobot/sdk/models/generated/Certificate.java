/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.validation.constraints.*;

import org.domainrobot.sdk.models.generated.BasicUser;
import org.domainrobot.sdk.models.generated.CaCertificate;
import org.domainrobot.sdk.models.generated.CertAuthentication;
import org.domainrobot.sdk.models.generated.CertificateHistory;
import org.domainrobot.sdk.models.generated.CertificateTransparencyPrivacyConstants;
import org.domainrobot.sdk.models.generated.CertificateType;
import org.domainrobot.sdk.models.generated.CodeSigningType;
import org.domainrobot.sdk.models.generated.ExtendedValidationExtension;
import org.domainrobot.sdk.models.generated.ServerSoftwareTypeConstants;
import org.domainrobot.sdk.models.generated.SignatureHashAlgorithmConstants;
import org.domainrobot.sdk.models.generated.SslContact;
import org.domainrobot.sdk.models.generated.SubjectAlternativeName;
import org.domainrobot.sdk.models.generated.TimePeriod;

import javax.validation.Valid;

/**
 * Certificate
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-08T13:30:26.488+01:00")
public class Certificate {
  @JsonProperty("created")
  private Date created = null;

  @JsonProperty("updated")
  private Date updated = null;

  @JsonProperty("owner")
  private BasicUser owner = null;

  @JsonProperty("updater")
  private BasicUser updater = null;

  @JsonProperty("extension")
  private ExtendedValidationExtension extension = null;

  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("partnerOrderId")
  private String partnerOrderId = null;

  @JsonProperty("orderId")
  private String orderId = null;

  @JsonProperty("adminContact")
  private SslContact adminContact = null;

  @JsonProperty("technicalContact")
  private SslContact technicalContact = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("lifetime")
  private TimePeriod lifetime = null;

  @JsonProperty("software")
  private ServerSoftwareTypeConstants software = null;

  @JsonProperty("comment")
  private String comment = null;

  @JsonProperty("csr")
  private String csr = null;

  @JsonProperty("server")
  private String server = null;

  @JsonProperty("serialNumber")
  private String serialNumber = null;

  @JsonProperty("product")
  private String product = null;

  @JsonProperty("codeSigningType")
  private CodeSigningType codeSigningType = null;

  @JsonProperty("certificateType")
  private CertificateType certificateType = null;

  @JsonProperty("signatureHashAlgorithm")
  private SignatureHashAlgorithmConstants signatureHashAlgorithm = null;

  @JsonProperty("expire")
  private Date expire = null;

  @JsonProperty("subjectAlternativeNames")
  private List<SubjectAlternativeName> subjectAlternativeNames = null;

  @JsonProperty("histories")
  private List<CertificateHistory> histories = null;

  @JsonProperty("certificationAuthority")
  private List<CaCertificate> certificationAuthority = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("firstname")
  private String firstname = null;

  @JsonProperty("lastname")
  private String lastname = null;

  @JsonProperty("organizationUnitName")
  private String organizationUnitName = null;

  @JsonProperty("authentication")
  private CertAuthentication authentication = null;

  @JsonProperty("certificateTransparency")
  private Boolean certificateTransparency = null;

  @JsonProperty("certificateTransparencyPrivacy")
  private CertificateTransparencyPrivacyConstants certificateTransparencyPrivacy = null;

  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("hasCsr")
  private Boolean hasCsr = null;

  @JsonProperty("idn")
  private String idn = null;

  public Certificate created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The created date.
   * @return created
  **/
  @Valid
  @ApiModelProperty(value = "The created date.")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public Certificate updated(Date updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The updated date.
   * @return updated
  **/
  @Valid
  @ApiModelProperty(value = "The updated date.")
  public Date getUpdated() {
    return updated;
  }

  public void setUpdated(Date updated) {
    this.updated = updated;
  }

  public Certificate owner(BasicUser owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the object.
   * @return owner
  **/
  @Valid
  @ApiModelProperty(value = "The owner of the object.")
  public BasicUser getOwner() {
    return owner;
  }

  public void setOwner(BasicUser owner) {
    this.owner = owner;
  }

  public Certificate updater(BasicUser updater) {
    this.updater = updater;
    return this;
  }

   /**
   * The updating user of the object.
   * @return updater
  **/
  @Valid
  @ApiModelProperty(value = "The updating user of the object.")
  public BasicUser getUpdater() {
    return updater;
  }

  public void setUpdater(BasicUser updater) {
    this.updater = updater;
  }

  public Certificate extension(ExtendedValidationExtension extension) {
    this.extension = extension;
    return this;
  }

   /**
   * The certificate extensions for comodo.
   * @return extension
  **/
  @Valid
  @ApiModelProperty(value = "The certificate extensions for comodo.")
  public ExtendedValidationExtension getExtension() {
    return extension;
  }

  public void setExtension(ExtendedValidationExtension extension) {
    this.extension = extension;
  }

  public Certificate id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the certificate
   * @return id
  **/
  @ApiModelProperty(value = "The ID of the certificate")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Certificate partnerOrderId(String partnerOrderId) {
    this.partnerOrderId = partnerOrderId;
    return this;
  }

   /**
   * The order number of the related request
   * @return partnerOrderId
  **/
  @ApiModelProperty(value = "The order number of the related request")
  public String getPartnerOrderId() {
    return partnerOrderId;
  }

  public void setPartnerOrderId(String partnerOrderId) {
    this.partnerOrderId = partnerOrderId;
  }

  public Certificate orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * The unique certificate order number
   * @return orderId
  **/
  @ApiModelProperty(value = "The unique certificate order number")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public Certificate adminContact(SslContact adminContact) {
    this.adminContact = adminContact;
    return this;
  }

   /**
   * The administrative contact
   * @return adminContact
  **/
  @Valid
  @ApiModelProperty(value = "The administrative contact")
  public SslContact getAdminContact() {
    return adminContact;
  }

  public void setAdminContact(SslContact adminContact) {
    this.adminContact = adminContact;
  }

  public Certificate technicalContact(SslContact technicalContact) {
    this.technicalContact = technicalContact;
    return this;
  }

   /**
   * The technical contact
   * @return technicalContact
  **/
  @Valid
  @ApiModelProperty(value = "The technical contact")
  public SslContact getTechnicalContact() {
    return technicalContact;
  }

  public void setTechnicalContact(SslContact technicalContact) {
    this.technicalContact = technicalContact;
  }

  public Certificate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the certificate
   * @return name
  **/
  @ApiModelProperty(value = "The name of the certificate")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Certificate lifetime(TimePeriod lifetime) {
    this.lifetime = lifetime;
    return this;
  }

   /**
   * The certificate term in months
   * @return lifetime
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The certificate term in months")
  public TimePeriod getLifetime() {
    return lifetime;
  }

  public void setLifetime(TimePeriod lifetime) {
    this.lifetime = lifetime;
  }

  public Certificate software(ServerSoftwareTypeConstants software) {
    this.software = software;
    return this;
  }

   /**
   * The webserver software in use, relevant values: &#39;II5&#39; for Mircosoft, &#39;APACHE2&#39; for Linux
   * @return software
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The webserver software in use, relevant values: 'II5' for Mircosoft, 'APACHE2' for Linux")
  public ServerSoftwareTypeConstants getSoftware() {
    return software;
  }

  public void setSoftware(ServerSoftwareTypeConstants software) {
    this.software = software;
  }

  public Certificate comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * A custom field. Can only be updated via PUT /certificate/{id}/_comment. Requires appropriate ACLs.
   * @return comment
  **/
  @ApiModelProperty(value = "A custom field. Can only be updated via PUT /certificate/{id}/_comment. Requires appropriate ACLs.")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public Certificate csr(String csr) {
    this.csr = csr;
    return this;
  }

   /**
   * CSR - Key (Certificate Signing Request)
   * @return csr
  **/
  @ApiModelProperty(value = "CSR - Key (Certificate Signing Request)")
  public String getCsr() {
    return csr;
  }

  public void setCsr(String csr) {
    this.csr = csr;
  }

  public Certificate server(String server) {
    this.server = server;
    return this;
  }

   /**
   * The certificate
   * @return server
  **/
  @ApiModelProperty(value = "The certificate")
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }

  public Certificate serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Serial number of the certificate
   * @return serialNumber
  **/
  @ApiModelProperty(value = "Serial number of the certificate")
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public Certificate product(String product) {
    this.product = product;
    return this;
  }

   /**
   * The ordered product
   * @return product
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The ordered product")
  public String getProduct() {
    return product;
  }

  public void setProduct(String product) {
    this.product = product;
  }

  public Certificate codeSigningType(CodeSigningType codeSigningType) {
    this.codeSigningType = codeSigningType;
    return this;
  }

   /**
   * The type of code signing
   * @return codeSigningType
  **/
  @Valid
  @ApiModelProperty(value = "The type of code signing")
  public CodeSigningType getCodeSigningType() {
    return codeSigningType;
  }

  public void setCodeSigningType(CodeSigningType codeSigningType) {
    this.codeSigningType = codeSigningType;
  }

  public Certificate certificateType(CertificateType certificateType) {
    this.certificateType = certificateType;
    return this;
  }

   /**
   * The type of the certificate
   * @return certificateType
  **/
  @Valid
  @ApiModelProperty(value = "The type of the certificate")
  public CertificateType getCertificateType() {
    return certificateType;
  }

  public void setCertificateType(CertificateType certificateType) {
    this.certificateType = certificateType;
  }

  public Certificate signatureHashAlgorithm(SignatureHashAlgorithmConstants signatureHashAlgorithm) {
    this.signatureHashAlgorithm = signatureHashAlgorithm;
    return this;
  }

   /**
   * The signature hash algorithm which was used
   * @return signatureHashAlgorithm
  **/
  @Valid
  @ApiModelProperty(value = "The signature hash algorithm which was used")
  public SignatureHashAlgorithmConstants getSignatureHashAlgorithm() {
    return signatureHashAlgorithm;
  }

  public void setSignatureHashAlgorithm(SignatureHashAlgorithmConstants signatureHashAlgorithm) {
    this.signatureHashAlgorithm = signatureHashAlgorithm;
  }

  public Certificate expire(Date expire) {
    this.expire = expire;
    return this;
  }

   /**
   * The date on which the certificate expires
   * @return expire
  **/
  @Valid
  @ApiModelProperty(value = "The date on which the certificate expires")
  public Date getExpire() {
    return expire;
  }

  public void setExpire(Date expire) {
    this.expire = expire;
  }

  public Certificate subjectAlternativeNames(List<SubjectAlternativeName> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  public Certificate addSubjectAlternativeNamesItem(SubjectAlternativeName subjectAlternativeNamesItem) {
    if (this.subjectAlternativeNames == null) {
      this.subjectAlternativeNames = new ArrayList<SubjectAlternativeName>();
    }
    this.subjectAlternativeNames.add(subjectAlternativeNamesItem);
    return this;
  }

   /**
   * Subject Alternative Names (SANs)
   * @return subjectAlternativeNames
  **/
  @Valid
  @ApiModelProperty(value = "Subject Alternative Names (SANs)")
  public List<SubjectAlternativeName> getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }

  public void setSubjectAlternativeNames(List<SubjectAlternativeName> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }

  public Certificate histories(List<CertificateHistory> histories) {
    this.histories = histories;
    return this;
  }

  public Certificate addHistoriesItem(CertificateHistory historiesItem) {
    if (this.histories == null) {
      this.histories = new ArrayList<CertificateHistory>();
    }
    this.histories.add(historiesItem);
    return this;
  }

   /**
   * The history of the certificate (old certificate versions)
   * @return histories
  **/
  @Valid
  @ApiModelProperty(value = "The history of the certificate (old certificate versions)")
  public List<CertificateHistory> getHistories() {
    return histories;
  }

  public void setHistories(List<CertificateHistory> histories) {
    this.histories = histories;
  }

  public Certificate certificationAuthority(List<CaCertificate> certificationAuthority) {
    this.certificationAuthority = certificationAuthority;
    return this;
  }

  public Certificate addCertificationAuthorityItem(CaCertificate certificationAuthorityItem) {
    if (this.certificationAuthority == null) {
      this.certificationAuthority = new ArrayList<CaCertificate>();
    }
    this.certificationAuthority.add(certificationAuthorityItem);
    return this;
  }

   /**
   * The certificate authority chain
   * @return certificationAuthority
  **/
  @Valid
  @ApiModelProperty(value = "The certificate authority chain")
  public List<CaCertificate> getCertificationAuthority() {
    return certificationAuthority;
  }

  public void setCertificationAuthority(List<CaCertificate> certificationAuthority) {
    this.certificationAuthority = certificationAuthority;
  }

  public Certificate password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password that is to be used for the certificate download. Only for S/MIME!
   * @return password
  **/
 @Pattern(regexp="^[-a-zA-Z0-9 ]{8,32}$")  @ApiModelProperty(value = "The password that is to be used for the certificate download. Only for S/MIME!")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Certificate firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * First Name. Only for S/MIME!
   * @return firstname
  **/
  @ApiModelProperty(value = "First Name. Only for S/MIME!")
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }

  public Certificate lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * Last Name. Only for S/MIME!
   * @return lastname
  **/
  @ApiModelProperty(value = "Last Name. Only for S/MIME!")
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }

  public Certificate organizationUnitName(String organizationUnitName) {
    this.organizationUnitName = organizationUnitName;
    return this;
  }

   /**
   * The organization unit. Only for S/MIME!
   * @return organizationUnitName
  **/
  @ApiModelProperty(value = "The organization unit. Only for S/MIME!")
  public String getOrganizationUnitName() {
    return organizationUnitName;
  }

  public void setOrganizationUnitName(String organizationUnitName) {
    this.organizationUnitName = organizationUnitName;
  }

  public Certificate authentication(CertAuthentication authentication) {
    this.authentication = authentication;
    return this;
  }

   /**
   * The authentication of the certificate
   * @return authentication
  **/
  @Valid
  @ApiModelProperty(value = "The authentication of the certificate")
  public CertAuthentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(CertAuthentication authentication) {
    this.authentication = authentication;
  }

  public Certificate certificateTransparency(Boolean certificateTransparency) {
    this.certificateTransparency = certificateTransparency;
    return this;
  }

   /**
   * Activates the certificate transparency for a certificate. Default is \&quot;True\&quot;.
   * @return certificateTransparency
  **/
  @ApiModelProperty(value = "Activates the certificate transparency for a certificate. Default is \"True\".")
  public Boolean isCertificateTransparency() {
    return certificateTransparency;
  }

  public void setCertificateTransparency(Boolean certificateTransparency) {
    this.certificateTransparency = certificateTransparency;
  }

  public Certificate certificateTransparencyPrivacy(CertificateTransparencyPrivacyConstants certificateTransparencyPrivacy) {
    this.certificateTransparencyPrivacy = certificateTransparencyPrivacy;
    return this;
  }

   /**
   * The privacy settings for certificate transparency. Default is \&quot;Redacted\&quot;.
   * @return certificateTransparencyPrivacy
  **/
  @Valid
  @ApiModelProperty(value = "The privacy settings for certificate transparency. Default is \"Redacted\".")
  public CertificateTransparencyPrivacyConstants getCertificateTransparencyPrivacy() {
    return certificateTransparencyPrivacy;
  }

  public void setCertificateTransparencyPrivacy(CertificateTransparencyPrivacyConstants certificateTransparencyPrivacy) {
    this.certificateTransparencyPrivacy = certificateTransparencyPrivacy;
  }

  public Certificate domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * The domain, which the redirect belongs.
   * @return domain
  **/
  @ApiModelProperty(value = "The domain, which the redirect belongs.")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public Certificate hasCsr(Boolean hasCsr) {
    this.hasCsr = hasCsr;
    return this;
  }

   /**
   * States if a self created CSR is to be used for S/MIME. Default is false. Only for S/MIME!
   * @return hasCsr
  **/
  @ApiModelProperty(value = "States if a self created CSR is to be used for S/MIME. Default is false. Only for S/MIME!")
  public Boolean isHasCsr() {
    return hasCsr;
  }

  public void setHasCsr(Boolean hasCsr) {
    this.hasCsr = hasCsr;
  }

  public Certificate idn(String idn) {
    this.idn = idn;
    return this;
  }

   /**
   * The IDN version of the URL of the target domain.
   * @return idn
  **/
  @ApiModelProperty(value = "The IDN version of the URL of the target domain.")
  public String getIdn() {
    return idn;
  }

  public void setIdn(String idn) {
    this.idn = idn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Certificate certificate = (Certificate) o;
    return Objects.equals(this.created, certificate.created) &&
        Objects.equals(this.updated, certificate.updated) &&
        Objects.equals(this.owner, certificate.owner) &&
        Objects.equals(this.updater, certificate.updater) &&
        Objects.equals(this.extension, certificate.extension) &&
        Objects.equals(this.id, certificate.id) &&
        Objects.equals(this.partnerOrderId, certificate.partnerOrderId) &&
        Objects.equals(this.orderId, certificate.orderId) &&
        Objects.equals(this.adminContact, certificate.adminContact) &&
        Objects.equals(this.technicalContact, certificate.technicalContact) &&
        Objects.equals(this.name, certificate.name) &&
        Objects.equals(this.lifetime, certificate.lifetime) &&
        Objects.equals(this.software, certificate.software) &&
        Objects.equals(this.comment, certificate.comment) &&
        Objects.equals(this.csr, certificate.csr) &&
        Objects.equals(this.server, certificate.server) &&
        Objects.equals(this.serialNumber, certificate.serialNumber) &&
        Objects.equals(this.product, certificate.product) &&
        Objects.equals(this.codeSigningType, certificate.codeSigningType) &&
        Objects.equals(this.certificateType, certificate.certificateType) &&
        Objects.equals(this.signatureHashAlgorithm, certificate.signatureHashAlgorithm) &&
        Objects.equals(this.expire, certificate.expire) &&
        Objects.equals(this.subjectAlternativeNames, certificate.subjectAlternativeNames) &&
        Objects.equals(this.histories, certificate.histories) &&
        Objects.equals(this.certificationAuthority, certificate.certificationAuthority) &&
        Objects.equals(this.password, certificate.password) &&
        Objects.equals(this.firstname, certificate.firstname) &&
        Objects.equals(this.lastname, certificate.lastname) &&
        Objects.equals(this.organizationUnitName, certificate.organizationUnitName) &&
        Objects.equals(this.authentication, certificate.authentication) &&
        Objects.equals(this.certificateTransparency, certificate.certificateTransparency) &&
        Objects.equals(this.certificateTransparencyPrivacy, certificate.certificateTransparencyPrivacy) &&
        Objects.equals(this.domain, certificate.domain) &&
        Objects.equals(this.hasCsr, certificate.hasCsr) &&
        Objects.equals(this.idn, certificate.idn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, owner, updater, extension, id, partnerOrderId, orderId, adminContact, technicalContact, name, lifetime, software, comment, csr, server, serialNumber, product, codeSigningType, certificateType, signatureHashAlgorithm, expire, subjectAlternativeNames, histories, certificationAuthority, password, firstname, lastname, organizationUnitName, authentication, certificateTransparency, certificateTransparencyPrivacy, domain, hasCsr, idn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Certificate {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    partnerOrderId: ").append(toIndentedString(partnerOrderId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    adminContact: ").append(toIndentedString(adminContact)).append("\n");
    sb.append("    technicalContact: ").append(toIndentedString(technicalContact)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    lifetime: ").append(toIndentedString(lifetime)).append("\n");
    sb.append("    software: ").append(toIndentedString(software)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    codeSigningType: ").append(toIndentedString(codeSigningType)).append("\n");
    sb.append("    certificateType: ").append(toIndentedString(certificateType)).append("\n");
    sb.append("    signatureHashAlgorithm: ").append(toIndentedString(signatureHashAlgorithm)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("    histories: ").append(toIndentedString(histories)).append("\n");
    sb.append("    certificationAuthority: ").append(toIndentedString(certificationAuthority)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    organizationUnitName: ").append(toIndentedString(organizationUnitName)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    certificateTransparency: ").append(toIndentedString(certificateTransparency)).append("\n");
    sb.append("    certificateTransparencyPrivacy: ").append(toIndentedString(certificateTransparencyPrivacy)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    hasCsr: ").append(toIndentedString(hasCsr)).append("\n");
    sb.append("    idn: ").append(toIndentedString(idn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

