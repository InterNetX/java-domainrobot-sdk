/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.domainrobot.sdk.models.generated.ACLRestriction;
import org.domainrobot.sdk.models.generated.BasicUser;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * UserAcl
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-13T13:06:11.008+01:00")
public class UserAcl {
  @JsonProperty("functionCode")
  private String functionCode = null;

  @JsonProperty("children")
  private List<BasicUser> children = null;

  @JsonProperty("childrenLocked")
  private Boolean childrenLocked = null;

  @JsonProperty("userLocked")
  private Boolean userLocked = null;

  @JsonProperty("effective")
  private Boolean effective = null;

  @JsonProperty("childrenRem")
  private List<BasicUser> childrenRem = null;

  @JsonProperty("childrenAdd")
  private List<BasicUser> childrenAdd = null;

  @JsonProperty("restriction")
  private ACLRestriction restriction = null;

  public UserAcl functionCode(String functionCode) {
    this.functionCode = functionCode;
    return this;
  }

   /**
   * The function code to restrict
   * @return functionCode
  **/
  @ApiModelProperty(value = "The function code to restrict")
  public String getFunctionCode() {
    return functionCode;
  }

  public void setFunctionCode(String functionCode) {
    this.functionCode = functionCode;
  }

  public UserAcl children(List<BasicUser> children) {
    this.children = children;
    return this;
  }

  public UserAcl addChildrenItem(BasicUser childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<BasicUser>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * The none locked children
   * @return children
  **/
  @Valid
  @ApiModelProperty(value = "The none locked children")
  public List<BasicUser> getChildren() {
    return children;
  }

  public void setChildren(List<BasicUser> children) {
    this.children = children;
  }

  public UserAcl childrenLocked(Boolean childrenLocked) {
    this.childrenLocked = childrenLocked;
    return this;
  }

   /**
   * The children lock
   * @return childrenLocked
  **/
  @ApiModelProperty(value = "The children lock")
  public Boolean isChildrenLocked() {
    return childrenLocked;
  }

  public void setChildrenLocked(Boolean childrenLocked) {
    this.childrenLocked = childrenLocked;
  }

  public UserAcl userLocked(Boolean userLocked) {
    this.userLocked = userLocked;
    return this;
  }

   /**
   * The user lock
   * @return userLocked
  **/
  @ApiModelProperty(value = "The user lock")
  public Boolean isUserLocked() {
    return userLocked;
  }

  public void setUserLocked(Boolean userLocked) {
    this.userLocked = userLocked;
  }

  public UserAcl effective(Boolean effective) {
    this.effective = effective;
    return this;
  }

   /**
   * The current active lock for the user
   * @return effective
  **/
  @ApiModelProperty(value = "The current active lock for the user")
  public Boolean isEffective() {
    return effective;
  }

  public void setEffective(Boolean effective) {
    this.effective = effective;
  }

  public UserAcl childrenRem(List<BasicUser> childrenRem) {
    this.childrenRem = childrenRem;
    return this;
  }

  public UserAcl addChildrenRemItem(BasicUser childrenRemItem) {
    if (this.childrenRem == null) {
      this.childrenRem = new ArrayList<BasicUser>();
    }
    this.childrenRem.add(childrenRemItem);
    return this;
  }

   /**
   * Children to remove from the exception list
   * @return childrenRem
  **/
  @Valid
  @ApiModelProperty(value = "Children to remove from the exception list")
  public List<BasicUser> getChildrenRem() {
    return childrenRem;
  }

  public void setChildrenRem(List<BasicUser> childrenRem) {
    this.childrenRem = childrenRem;
  }

  public UserAcl childrenAdd(List<BasicUser> childrenAdd) {
    this.childrenAdd = childrenAdd;
    return this;
  }

  public UserAcl addChildrenAddItem(BasicUser childrenAddItem) {
    if (this.childrenAdd == null) {
      this.childrenAdd = new ArrayList<BasicUser>();
    }
    this.childrenAdd.add(childrenAddItem);
    return this;
  }

   /**
   * Children to add to the exception list
   * @return childrenAdd
  **/
  @Valid
  @ApiModelProperty(value = "Children to add to the exception list")
  public List<BasicUser> getChildrenAdd() {
    return childrenAdd;
  }

  public void setChildrenAdd(List<BasicUser> childrenAdd) {
    this.childrenAdd = childrenAdd;
  }

  public UserAcl restriction(ACLRestriction restriction) {
    this.restriction = restriction;
    return this;
  }

   /**
   * The human readable restriction mode
   * @return restriction
  **/
  @Valid
  @ApiModelProperty(value = "The human readable restriction mode")
  public ACLRestriction getRestriction() {
    return restriction;
  }

  public void setRestriction(ACLRestriction restriction) {
    this.restriction = restriction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAcl userAcl = (UserAcl) o;
    return Objects.equals(this.functionCode, userAcl.functionCode) &&
        Objects.equals(this.children, userAcl.children) &&
        Objects.equals(this.childrenLocked, userAcl.childrenLocked) &&
        Objects.equals(this.userLocked, userAcl.userLocked) &&
        Objects.equals(this.effective, userAcl.effective) &&
        Objects.equals(this.childrenRem, userAcl.childrenRem) &&
        Objects.equals(this.childrenAdd, userAcl.childrenAdd) &&
        Objects.equals(this.restriction, userAcl.restriction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionCode, children, childrenLocked, userLocked, effective, childrenRem, childrenAdd, restriction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAcl {\n");
    
    sb.append("    functionCode: ").append(toIndentedString(functionCode)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    childrenLocked: ").append(toIndentedString(childrenLocked)).append("\n");
    sb.append("    userLocked: ").append(toIndentedString(userLocked)).append("\n");
    sb.append("    effective: ").append(toIndentedString(effective)).append("\n");
    sb.append("    childrenRem: ").append(toIndentedString(childrenRem)).append("\n");
    sb.append("    childrenAdd: ").append(toIndentedString(childrenAdd)).append("\n");
    sb.append("    restriction: ").append(toIndentedString(restriction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

