/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.domainrobot.sdk.models.generated.BasicUser;
import org.domainrobot.sdk.models.generated.Id4MeAgentStatus;
import org.domainrobot.sdk.models.generated.ModelConfiguration;
import org.domainrobot.sdk.models.generated.VhostCertificate;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Id4MeAgent
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-13T13:06:11.008+01:00")
public class Id4MeAgent {
  @JsonProperty("created")
  private Date created = null;

  @JsonProperty("updated")
  private Date updated = null;

  @JsonProperty("owner")
  private BasicUser owner = null;

  @JsonProperty("updater")
  private BasicUser updater = null;

  @JsonProperty("externalReference")
  private String externalReference = null;

  @JsonProperty("certificate")
  private VhostCertificate certificate = null;

  @JsonProperty("layoutAddon")
  private ModelConfiguration layoutAddon = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("status")
  private Id4MeAgentStatus status = null;

  @JsonProperty("records")
  private List<String> records = null;

  public Id4MeAgent created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The created date.
   * @return created
  **/
  @Valid
  @ApiModelProperty(value = "The created date.")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public Id4MeAgent updated(Date updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The updated date.
   * @return updated
  **/
  @Valid
  @ApiModelProperty(value = "The updated date.")
  public Date getUpdated() {
    return updated;
  }

  public void setUpdated(Date updated) {
    this.updated = updated;
  }

  public Id4MeAgent owner(BasicUser owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the object.
   * @return owner
  **/
  @Valid
  @ApiModelProperty(value = "The owner of the object.")
  public BasicUser getOwner() {
    return owner;
  }

  public void setOwner(BasicUser owner) {
    this.owner = owner;
  }

  public Id4MeAgent updater(BasicUser updater) {
    this.updater = updater;
    return this;
  }

   /**
   * The updater of the object.
   * @return updater
  **/
  @Valid
  @ApiModelProperty(value = "The updater of the object.")
  public BasicUser getUpdater() {
    return updater;
  }

  public void setUpdater(BasicUser updater) {
    this.updater = updater;
  }

  public Id4MeAgent externalReference(String externalReference) {
    this.externalReference = externalReference;
    return this;
  }

   /**
   * External reference
   * @return externalReference
  **/
  @ApiModelProperty(value = "External reference")
  public String getExternalReference() {
    return externalReference;
  }

  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }

  public Id4MeAgent certificate(VhostCertificate certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * Virtual host with certificate data
   * @return certificate
  **/
  @Valid
  @ApiModelProperty(value = "Virtual host with certificate data")
  public VhostCertificate getCertificate() {
    return certificate;
  }

  public void setCertificate(VhostCertificate certificate) {
    this.certificate = certificate;
  }

  public Id4MeAgent layoutAddon(ModelConfiguration layoutAddon) {
    this.layoutAddon = layoutAddon;
    return this;
  }

   /**
   * Layout properties
   * @return layoutAddon
  **/
  @Valid
  @ApiModelProperty(value = "Layout properties")
  public ModelConfiguration getLayoutAddon() {
    return layoutAddon;
  }

  public void setLayoutAddon(ModelConfiguration layoutAddon) {
    this.layoutAddon = layoutAddon;
  }

  public Id4MeAgent name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Fully qualified domain name
   * @return name
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Fully qualified domain name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Id4MeAgent status(Id4MeAgentStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Agent status
   * @return status
  **/
  @Valid
  @ApiModelProperty(value = "Agent status")
  public Id4MeAgentStatus getStatus() {
    return status;
  }

  public void setStatus(Id4MeAgentStatus status) {
    this.status = status;
  }

  public Id4MeAgent records(List<String> records) {
    this.records = records;
    return this;
  }

  public Id4MeAgent addRecordsItem(String recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<String>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * List of dns text records
   * @return records
  **/
  @ApiModelProperty(value = "List of dns text records")
  public List<String> getRecords() {
    return records;
  }

  public void setRecords(List<String> records) {
    this.records = records;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Id4MeAgent id4MeAgent = (Id4MeAgent) o;
    return Objects.equals(this.created, id4MeAgent.created) &&
        Objects.equals(this.updated, id4MeAgent.updated) &&
        Objects.equals(this.owner, id4MeAgent.owner) &&
        Objects.equals(this.updater, id4MeAgent.updater) &&
        Objects.equals(this.externalReference, id4MeAgent.externalReference) &&
        Objects.equals(this.certificate, id4MeAgent.certificate) &&
        Objects.equals(this.layoutAddon, id4MeAgent.layoutAddon) &&
        Objects.equals(this.name, id4MeAgent.name) &&
        Objects.equals(this.status, id4MeAgent.status) &&
        Objects.equals(this.records, id4MeAgent.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, owner, updater, externalReference, certificate, layoutAddon, name, status, records);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Id4MeAgent {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    layoutAddon: ").append(toIndentedString(layoutAddon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

