/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * DomainParkingExtensions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-08T13:30:26.488+01:00")
public class DomainParkingExtensions {
  @JsonProperty("parkingCategory")
  private String parkingCategory = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("domainLanguage")
  private String domainLanguage = null;

  @JsonProperty("forSale")
  private Boolean forSale = null;

  @JsonProperty("keyword")
  private String keyword = null;

  @JsonProperty("price")
  private Double price = null;

  @JsonProperty("fixedPrice")
  private Boolean fixedPrice = null;

  @JsonProperty("minPrice")
  private Double minPrice = null;

  public DomainParkingExtensions parkingCategory(String parkingCategory) {
    this.parkingCategory = parkingCategory;
    return this;
  }

   /**
   * Lorem Ipsum
   * @return parkingCategory
  **/
  @ApiModelProperty(value = "Lorem Ipsum")
  public String getParkingCategory() {
    return parkingCategory;
  }

  public void setParkingCategory(String parkingCategory) {
    this.parkingCategory = parkingCategory;
  }

  public DomainParkingExtensions currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the sale
   * @return currency
  **/
  @ApiModelProperty(example = "EUR", value = "The currency of the sale")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public DomainParkingExtensions domainLanguage(String domainLanguage) {
    this.domainLanguage = domainLanguage;
    return this;
  }

   /**
   * The parking
   * @return domainLanguage
  **/
  @ApiModelProperty(value = "The parking")
  public String getDomainLanguage() {
    return domainLanguage;
  }

  public void setDomainLanguage(String domainLanguage) {
    this.domainLanguage = domainLanguage;
  }

  public DomainParkingExtensions forSale(Boolean forSale) {
    this.forSale = forSale;
    return this;
  }

   /**
   * Should the domain be listed for sale
   * @return forSale
  **/
  @ApiModelProperty(value = "Should the domain be listed for sale")
  public Boolean isForSale() {
    return forSale;
  }

  public void setForSale(Boolean forSale) {
    this.forSale = forSale;
  }

  public DomainParkingExtensions keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

   /**
   * The keywords to use
   * @return keyword
  **/
  @ApiModelProperty(value = "The keywords to use")
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }

  public DomainParkingExtensions price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * The price to use
   * @return price
  **/
  @ApiModelProperty(value = "The price to use")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public DomainParkingExtensions fixedPrice(Boolean fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

   /**
   * Is the price fix
   * @return fixedPrice
  **/
  @ApiModelProperty(value = "Is the price fix")
  public Boolean isFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Boolean fixedPrice) {
    this.fixedPrice = fixedPrice;
  }

  public DomainParkingExtensions minPrice(Double minPrice) {
    this.minPrice = minPrice;
    return this;
  }

   /**
   * The minimum of price
   * @return minPrice
  **/
  @ApiModelProperty(value = "The minimum of price")
  public Double getMinPrice() {
    return minPrice;
  }

  public void setMinPrice(Double minPrice) {
    this.minPrice = minPrice;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainParkingExtensions domainParkingExtensions = (DomainParkingExtensions) o;
    return Objects.equals(this.parkingCategory, domainParkingExtensions.parkingCategory) &&
        Objects.equals(this.currency, domainParkingExtensions.currency) &&
        Objects.equals(this.domainLanguage, domainParkingExtensions.domainLanguage) &&
        Objects.equals(this.forSale, domainParkingExtensions.forSale) &&
        Objects.equals(this.keyword, domainParkingExtensions.keyword) &&
        Objects.equals(this.price, domainParkingExtensions.price) &&
        Objects.equals(this.fixedPrice, domainParkingExtensions.fixedPrice) &&
        Objects.equals(this.minPrice, domainParkingExtensions.minPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parkingCategory, currency, domainLanguage, forSale, keyword, price, fixedPrice, minPrice);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainParkingExtensions {\n");
    
    sb.append("    parkingCategory: ").append(toIndentedString(parkingCategory)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    domainLanguage: ").append(toIndentedString(domainLanguage)).append("\n");
    sb.append("    forSale: ").append(toIndentedString(forSale)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    minPrice: ").append(toIndentedString(minPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

