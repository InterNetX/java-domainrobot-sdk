/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;
import org.domainrobot.sdk.models.generated.BasicUser;
import org.domainrobot.sdk.models.generated.CancelationTypeConstants;
import org.domainrobot.sdk.models.generated.ExecutionTypeConstants;
import org.domainrobot.sdk.models.generated.RegistryStatusConstants;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * DomainCancelation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-13T09:53:42.259+01:00")
public class DomainCancelation {
  @JsonProperty("created")
  private Date created = null;

  @JsonProperty("updated")
  private Date updated = null;

  @JsonProperty("owner")
  private BasicUser owner = null;

  @JsonProperty("updater")
  private BasicUser updater = null;

  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("registryWhen")
  private Date registryWhen = null;

  @JsonProperty("gainingRegistrar")
  private String gainingRegistrar = null;

  @JsonProperty("disconnect")
  private Boolean disconnect = null;

  @JsonProperty("notice")
  private String notice = null;

  @JsonProperty("logId")
  private Long logId = null;

  @JsonProperty("registryStatus")
  private RegistryStatusConstants registryStatus = null;

  @JsonProperty("type")
  private CancelationTypeConstants type = null;

  @JsonProperty("execution")
  private ExecutionTypeConstants execution = null;

  public DomainCancelation created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The created date.
   * @return created
  **/
  @Valid
  @ApiModelProperty(value = "The created date.")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public DomainCancelation updated(Date updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The updated date.
   * @return updated
  **/
  @Valid
  @ApiModelProperty(value = "The updated date.")
  public Date getUpdated() {
    return updated;
  }

  public void setUpdated(Date updated) {
    this.updated = updated;
  }

  public DomainCancelation owner(BasicUser owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the object.
   * @return owner
  **/
  @Valid
  @ApiModelProperty(value = "The owner of the object.")
  public BasicUser getOwner() {
    return owner;
  }

  public void setOwner(BasicUser owner) {
    this.owner = owner;
  }

  public DomainCancelation updater(BasicUser updater) {
    this.updater = updater;
    return this;
  }

   /**
   * The updater of the object.
   * @return updater
  **/
  @Valid
  @ApiModelProperty(value = "The updater of the object.")
  public BasicUser getUpdater() {
    return updater;
  }

  public void setUpdater(BasicUser updater) {
    this.updater = updater;
  }

  public DomainCancelation domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public DomainCancelation registryWhen(Date registryWhen) {
    this.registryWhen = registryWhen;
    return this;
  }

   /**
   * The date of the execution. Only necessary when ExecutionType equals DATE.
   * @return registryWhen
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The date of the execution. Only necessary when ExecutionType equals DATE.")
  public Date getRegistryWhen() {
    return registryWhen;
  }

  public void setRegistryWhen(Date registryWhen) {
    this.registryWhen = registryWhen;
  }

  public DomainCancelation gainingRegistrar(String gainingRegistrar) {
    this.gainingRegistrar = gainingRegistrar;
    return this;
  }

   /**
   * Get gainingRegistrar
   * @return gainingRegistrar
  **/
  @ApiModelProperty(value = "")
  public String getGainingRegistrar() {
    return gainingRegistrar;
  }

  public void setGainingRegistrar(String gainingRegistrar) {
    this.gainingRegistrar = gainingRegistrar;
  }

  public DomainCancelation disconnect(Boolean disconnect) {
    this.disconnect = disconnect;
    return this;
  }

   /**
   * Get disconnect
   * @return disconnect
  **/
  @ApiModelProperty(value = "")
  public Boolean isDisconnect() {
    return disconnect;
  }

  public void setDisconnect(Boolean disconnect) {
    this.disconnect = disconnect;
  }

  public DomainCancelation notice(String notice) {
    this.notice = notice;
    return this;
  }

   /**
   * Some remarks
   * @return notice
  **/
  @ApiModelProperty(value = "Some remarks")
  public String getNotice() {
    return notice;
  }

  public void setNotice(String notice) {
    this.notice = notice;
  }

  public DomainCancelation logId(Long logId) {
    this.logId = logId;
    return this;
  }

   /**
   * Get logId
   * @return logId
  **/
  @ApiModelProperty(value = "")
  public Long getLogId() {
    return logId;
  }

  public void setLogId(Long logId) {
    this.logId = logId;
  }

  public DomainCancelation registryStatus(RegistryStatusConstants registryStatus) {
    this.registryStatus = registryStatus;
    return this;
  }

   /**
   * Get registryStatus
   * @return registryStatus
  **/
  @Valid
  @ApiModelProperty(value = "")
  public RegistryStatusConstants getRegistryStatus() {
    return registryStatus;
  }

  public void setRegistryStatus(RegistryStatusConstants registryStatus) {
    this.registryStatus = registryStatus;
  }

  public DomainCancelation type(CancelationTypeConstants type) {
    this.type = type;
    return this;
  }

   /**
   * The cancelation type. TRANSIT is only possible for certain TLDs.
   * @return type
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The cancelation type. TRANSIT is only possible for certain TLDs.")
  public CancelationTypeConstants getType() {
    return type;
  }

  public void setType(CancelationTypeConstants type) {
    this.type = type;
  }

  public DomainCancelation execution(ExecutionTypeConstants execution) {
    this.execution = execution;
    return this;
  }

   /**
   * The execution type.
   * @return execution
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The execution type.")
  public ExecutionTypeConstants getExecution() {
    return execution;
  }

  public void setExecution(ExecutionTypeConstants execution) {
    this.execution = execution;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainCancelation domainCancelation = (DomainCancelation) o;
    return Objects.equals(this.created, domainCancelation.created) &&
        Objects.equals(this.updated, domainCancelation.updated) &&
        Objects.equals(this.owner, domainCancelation.owner) &&
        Objects.equals(this.updater, domainCancelation.updater) &&
        Objects.equals(this.domain, domainCancelation.domain) &&
        Objects.equals(this.registryWhen, domainCancelation.registryWhen) &&
        Objects.equals(this.gainingRegistrar, domainCancelation.gainingRegistrar) &&
        Objects.equals(this.disconnect, domainCancelation.disconnect) &&
        Objects.equals(this.notice, domainCancelation.notice) &&
        Objects.equals(this.logId, domainCancelation.logId) &&
        Objects.equals(this.registryStatus, domainCancelation.registryStatus) &&
        Objects.equals(this.type, domainCancelation.type) &&
        Objects.equals(this.execution, domainCancelation.execution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, owner, updater, domain, registryWhen, gainingRegistrar, disconnect, notice, logId, registryStatus, type, execution);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainCancelation {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    registryWhen: ").append(toIndentedString(registryWhen)).append("\n");
    sb.append("    gainingRegistrar: ").append(toIndentedString(gainingRegistrar)).append("\n");
    sb.append("    disconnect: ").append(toIndentedString(disconnect)).append("\n");
    sb.append("    notice: ").append(toIndentedString(notice)).append("\n");
    sb.append("    logId: ").append(toIndentedString(logId)).append("\n");
    sb.append("    registryStatus: ").append(toIndentedString(registryStatus)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

