/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;
import org.domainrobot.sdk.models.generated.IpRestrictionTypeConstants;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * IpRestriction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-13T13:06:11.008+01:00")
public class IpRestriction {
  @JsonProperty("created")
  private Date created = null;

  @JsonProperty("updated")
  private Date updated = null;

  @JsonProperty("type")
  private IpRestrictionTypeConstants type = null;

  @JsonProperty("address")
  private String address = null;

  public IpRestriction created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The created date.
   * @return created
  **/
  @Valid
  @ApiModelProperty(value = "The created date.")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public IpRestriction updated(Date updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The updated date.
   * @return updated
  **/
  @Valid
  @ApiModelProperty(value = "The updated date.")
  public Date getUpdated() {
    return updated;
  }

  public void setUpdated(Date updated) {
    this.updated = updated;
  }

  public IpRestriction type(IpRestrictionTypeConstants type) {
    this.type = type;
    return this;
  }

   /**
   * The restriction level
   * @return type
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The restriction level")
  public IpRestrictionTypeConstants getType() {
    return type;
  }

  public void setType(IpRestrictionTypeConstants type) {
    this.type = type;
  }

  public IpRestriction address(String address) {
    this.address = address;
    return this;
  }

   /**
   * A net address or ip address
   * @return address
  **/
  @NotNull
  @ApiModelProperty(example = "192.33.1.4/24", required = true, value = "A net address or ip address")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpRestriction ipRestriction = (IpRestriction) o;
    return Objects.equals(this.created, ipRestriction.created) &&
        Objects.equals(this.updated, ipRestriction.updated) &&
        Objects.equals(this.type, ipRestriction.type) &&
        Objects.equals(this.address, ipRestriction.address);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, type, address);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpRestriction {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

