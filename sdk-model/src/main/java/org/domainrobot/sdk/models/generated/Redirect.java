/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.domainrobot.sdk.models.generated.BasicUser;
import org.domainrobot.sdk.models.generated.RedirectModeConstants;
import org.domainrobot.sdk.models.generated.RedirectTypeConstants;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Redirect
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-13T09:53:42.259+01:00")
public class Redirect {
  @JsonProperty("created")
  private Date created = null;

  @JsonProperty("updated")
  private Date updated = null;

  @JsonProperty("owner")
  private BasicUser owner = null;

  @JsonProperty("updater")
  private BasicUser updater = null;

  @JsonProperty("source")
  private String source = null;

  @JsonProperty("target")
  private String target = null;

  @JsonProperty("type")
  private RedirectTypeConstants type = null;

  @JsonProperty("mode")
  private RedirectModeConstants mode = null;

  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("backups")
  private List<String> backups = null;

  @JsonProperty("sourceIdn")
  private String sourceIdn = null;

  @JsonProperty("targetIdn")
  private String targetIdn = null;

  @JsonProperty("lastSeen")
  private Date lastSeen = null;

  public Redirect created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The created date.
   * @return created
  **/
  @Valid
  @ApiModelProperty(value = "The created date.")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public Redirect updated(Date updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The updated date.
   * @return updated
  **/
  @Valid
  @ApiModelProperty(value = "The updated date.")
  public Date getUpdated() {
    return updated;
  }

  public void setUpdated(Date updated) {
    this.updated = updated;
  }

  public Redirect owner(BasicUser owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the object.
   * @return owner
  **/
  @Valid
  @ApiModelProperty(value = "The owner of the object.")
  public BasicUser getOwner() {
    return owner;
  }

  public void setOwner(BasicUser owner) {
    this.owner = owner;
  }

  public Redirect updater(BasicUser updater) {
    this.updater = updater;
    return this;
  }

   /**
   * The updater of the object.
   * @return updater
  **/
  @Valid
  @ApiModelProperty(value = "The updater of the object.")
  public BasicUser getUpdater() {
    return updater;
  }

  public void setUpdater(BasicUser updater) {
    this.updater = updater;
  }

  public Redirect source(String source) {
    this.source = source;
    return this;
  }

   /**
   * The domain to be redirected. Enter the domain with or without \&quot;www\&quot;.
   * @return source
  **/
  @ApiModelProperty(value = "The domain to be redirected. Enter the domain with or without \"www\".")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public Redirect target(String target) {
    this.target = target;
    return this;
  }

   /**
   * The URL of the target domain. Enter the domain without \&quot;http://\&quot;
   * @return target
  **/
  @ApiModelProperty(value = "The URL of the target domain. Enter the domain without \"http://\"")
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }

  public Redirect type(RedirectTypeConstants type) {
    this.type = type;
    return this;
  }

   /**
   * Redirect type
   * @return type
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Redirect type")
  public RedirectTypeConstants getType() {
    return type;
  }

  public void setType(RedirectTypeConstants type) {
    this.type = type;
  }

  public Redirect mode(RedirectModeConstants mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Redirect mode
   * @return mode
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Redirect mode")
  public RedirectModeConstants getMode() {
    return mode;
  }

  public void setMode(RedirectModeConstants mode) {
    this.mode = mode;
  }

  public Redirect domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * The domain, which the redirect belongs.
   * @return domain
  **/
  @ApiModelProperty(value = "The domain, which the redirect belongs.")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public Redirect title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Lorem Ipsum
   * @return title
  **/
  @ApiModelProperty(value = "Lorem Ipsum")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Redirect backups(List<String> backups) {
    this.backups = backups;
    return this;
  }

  public Redirect addBackupsItem(String backupsItem) {
    if (this.backups == null) {
      this.backups = new ArrayList<String>();
    }
    this.backups.add(backupsItem);
    return this;
  }

   /**
   * Lorem Ipsum
   * @return backups
  **/
 @Size(min=0,max=3)  @ApiModelProperty(value = "Lorem Ipsum")
  public List<String> getBackups() {
    return backups;
  }

  public void setBackups(List<String> backups) {
    this.backups = backups;
  }

  public Redirect sourceIdn(String sourceIdn) {
    this.sourceIdn = sourceIdn;
    return this;
  }

   /**
   * The IDN version of the domain to be redirected. Enter the domain with or without \&quot;www\&quot;.
   * @return sourceIdn
  **/
  @ApiModelProperty(value = "The IDN version of the domain to be redirected. Enter the domain with or without \"www\".")
  public String getSourceIdn() {
    return sourceIdn;
  }

  public void setSourceIdn(String sourceIdn) {
    this.sourceIdn = sourceIdn;
  }

  public Redirect targetIdn(String targetIdn) {
    this.targetIdn = targetIdn;
    return this;
  }

   /**
   * The IDN version of the URL of the target domain. Enter the domain without \&quot;http://\&quot;
   * @return targetIdn
  **/
  @ApiModelProperty(value = "The IDN version of the URL of the target domain. Enter the domain without \"http://\"")
  public String getTargetIdn() {
    return targetIdn;
  }

  public void setTargetIdn(String targetIdn) {
    this.targetIdn = targetIdn;
  }

  public Redirect lastSeen(Date lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * The last dns connection.
   * @return lastSeen
  **/
  @Valid
  @ApiModelProperty(value = "The last dns connection.")
  public Date getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(Date lastSeen) {
    this.lastSeen = lastSeen;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Redirect redirect = (Redirect) o;
    return Objects.equals(this.created, redirect.created) &&
        Objects.equals(this.updated, redirect.updated) &&
        Objects.equals(this.owner, redirect.owner) &&
        Objects.equals(this.updater, redirect.updater) &&
        Objects.equals(this.source, redirect.source) &&
        Objects.equals(this.target, redirect.target) &&
        Objects.equals(this.type, redirect.type) &&
        Objects.equals(this.mode, redirect.mode) &&
        Objects.equals(this.domain, redirect.domain) &&
        Objects.equals(this.title, redirect.title) &&
        Objects.equals(this.backups, redirect.backups) &&
        Objects.equals(this.sourceIdn, redirect.sourceIdn) &&
        Objects.equals(this.targetIdn, redirect.targetIdn) &&
        Objects.equals(this.lastSeen, redirect.lastSeen);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, owner, updater, source, target, type, mode, domain, title, backups, sourceIdn, targetIdn, lastSeen);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Redirect {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    backups: ").append(toIndentedString(backups)).append("\n");
    sb.append("    sourceIdn: ").append(toIndentedString(sourceIdn)).append("\n");
    sb.append("    targetIdn: ").append(toIndentedString(targetIdn)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

