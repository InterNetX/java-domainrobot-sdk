/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.validation.constraints.*;

import org.domainrobot.sdk.models.generated.AutoRenewStatusConstants;
import org.domainrobot.sdk.models.generated.BasicUser;
import org.domainrobot.sdk.models.generated.CancelationStatusConstants;
import org.domainrobot.sdk.models.generated.Contact;
import org.domainrobot.sdk.models.generated.DNSCheck;
import org.domainrobot.sdk.models.generated.DNSSec;
import org.domainrobot.sdk.models.generated.DNSSecJob;
import org.domainrobot.sdk.models.generated.DomainActionConstants;
import org.domainrobot.sdk.models.generated.DomainExtensions;
import org.domainrobot.sdk.models.generated.DomainServices;
import org.domainrobot.sdk.models.generated.NameServer;
import org.domainrobot.sdk.models.generated.ParkingProviderConstants;
import org.domainrobot.sdk.models.generated.RddsOptInConstants;
import org.domainrobot.sdk.models.generated.RegistryStatusConstants;
import org.domainrobot.sdk.models.generated.TimePeriod;
import org.domainrobot.sdk.models.generated.Zone;

import javax.validation.Valid;

/**
 * DomainRestore
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-08T13:30:26.488+01:00")
public class DomainRestore {
  @JsonProperty("created")
  private Date created = null;

  @JsonProperty("updated")
  private Date updated = null;

  @JsonProperty("owner")
  private BasicUser owner = null;

  @JsonProperty("updater")
  private BasicUser updater = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("idn")
  private String idn = null;

  @JsonProperty("nicMemberLabel")
  private String nicMemberLabel = null;

  @JsonProperty("registryStatus")
  private RegistryStatusConstants registryStatus = null;

  @JsonProperty("nameServers")
  private List<NameServer> nameServers = null;

  @JsonProperty("nameServerEntries")
  private List<String> nameServerEntries = null;

  @JsonProperty("period")
  private TimePeriod period = null;

  @JsonProperty("trustee")
  private Boolean trustee = null;

  @JsonProperty("privacy")
  private Boolean privacy = null;

  @JsonProperty("authinfo")
  private String authinfo = null;

  @JsonProperty("domainsafe")
  private Boolean domainsafe = null;

  @JsonProperty("parking")
  private ParkingProviderConstants parking = null;

  @JsonProperty("extensions")
  private DomainExtensions extensions = null;

  @JsonProperty("logId")
  private Long logId = null;

  @JsonProperty("nsCheck")
  private DNSCheck nsCheck = null;

  @JsonProperty("confirmOrder")
  private Boolean confirmOrder = null;

  @JsonProperty("confirmOwnerConsent")
  private Boolean confirmOwnerConsent = null;

  @JsonProperty("ignoreWhois")
  private Boolean ignoreWhois = null;

  @JsonProperty("comment")
  private String comment = null;

  @JsonProperty("includeWWW")
  private Boolean includeWWW = null;

  @JsonProperty("includeWildcard")
  private Boolean includeWildcard = null;

  @JsonProperty("registrarStatus")
  private RegistryStatusConstants registrarStatus = null;

  @JsonProperty("registrarStatusReason")
  private String registrarStatusReason = null;

  @JsonProperty("removeCancelation")
  private Boolean removeCancelation = null;

  @JsonProperty("autodnsSecJob")
  private DNSSecJob autodnsSecJob = null;

  @JsonProperty("priceClass")
  private String priceClass = null;

  @JsonProperty("priceClassRenew")
  private String priceClassRenew = null;

  @JsonProperty("abuseEmail")
  private String abuseEmail = null;

  @JsonProperty("generalRequestEmail")
  private String generalRequestEmail = null;

  @JsonProperty("privacyPlusMail")
  private String privacyPlusMail = null;

  @JsonProperty("privacyPlus")
  private Boolean privacyPlus = null;

  @JsonProperty("nameServerGroup")
  private String nameServerGroup = null;

  @JsonProperty("rddsOptIn")
  private RddsOptInConstants rddsOptIn = null;

  @JsonProperty("servicesAdd")
  private DomainServices servicesAdd = null;

  @JsonProperty("servicesRem")
  private DomainServices servicesRem = null;

  @JsonProperty("deleted")
  private Date deleted = null;

  @JsonProperty("restorePhaseEnd")
  private Date restorePhaseEnd = null;

  @JsonProperty("ownerc")
  private Contact ownerc = null;

  @JsonProperty("adminc")
  private Contact adminc = null;

  @JsonProperty("techc")
  private Contact techc = null;

  @JsonProperty("zonec")
  private Contact zonec = null;

  @JsonProperty("expire")
  private Date expire = null;

  @JsonProperty("payable")
  private Date payable = null;

  @JsonProperty("action")
  private DomainActionConstants action = null;

  @JsonProperty("autoDnssec")
  private Boolean autoDnssec = null;

  @JsonProperty("dnssec")
  private Boolean dnssec = null;

  @JsonProperty("validCertificate")
  private Boolean validCertificate = null;

  @JsonProperty("cancelationStatus")
  private CancelationStatusConstants cancelationStatus = null;

  @JsonProperty("autoRenewStatus")
  private AutoRenewStatusConstants autoRenewStatus = null;

  @JsonProperty("dnssecData")
  private List<DNSSec> dnssecData = null;

  @JsonProperty("zone")
  private Zone zone = null;

  public DomainRestore created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The created date.
   * @return created
  **/
  @Valid
  @ApiModelProperty(value = "The created date.")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public DomainRestore updated(Date updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The updated date.
   * @return updated
  **/
  @Valid
  @ApiModelProperty(value = "The updated date.")
  public Date getUpdated() {
    return updated;
  }

  public void setUpdated(Date updated) {
    this.updated = updated;
  }

  public DomainRestore owner(BasicUser owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the object.
   * @return owner
  **/
  @Valid
  @ApiModelProperty(value = "The owner of the object.")
  public BasicUser getOwner() {
    return owner;
  }

  public void setOwner(BasicUser owner) {
    this.owner = owner;
  }

  public DomainRestore updater(BasicUser updater) {
    this.updater = updater;
    return this;
  }

   /**
   * The updater of the object.
   * @return updater
  **/
  @Valid
  @ApiModelProperty(value = "The updater of the object.")
  public BasicUser getUpdater() {
    return updater;
  }

  public void setUpdater(BasicUser updater) {
    this.updater = updater;
  }

  public DomainRestore name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the domain.
   * @return name
  **/
  @NotNull
  @ApiModelProperty(example = "domain.de", required = true, value = "The name of the domain.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DomainRestore idn(String idn) {
    this.idn = idn;
    return this;
  }

   /**
   * The unicode domain name
   * @return idn
  **/
  @ApiModelProperty(example = "m√ºller.org", value = "The unicode domain name")
  public String getIdn() {
    return idn;
  }

  public void setIdn(String idn) {
    this.idn = idn;
  }

  public DomainRestore nicMemberLabel(String nicMemberLabel) {
    this.nicMemberLabel = nicMemberLabel;
    return this;
  }

   /**
   * The nic member label.
   * @return nicMemberLabel
  **/
  @ApiModelProperty(value = "The nic member label.")
  public String getNicMemberLabel() {
    return nicMemberLabel;
  }

  public void setNicMemberLabel(String nicMemberLabel) {
    this.nicMemberLabel = nicMemberLabel;
  }

  public DomainRestore registryStatus(RegistryStatusConstants registryStatus) {
    this.registryStatus = registryStatus;
    return this;
  }

   /**
   * The registry status.
   * @return registryStatus
  **/
  @Valid
  @ApiModelProperty(value = "The registry status.")
  public RegistryStatusConstants getRegistryStatus() {
    return registryStatus;
  }

  public void setRegistryStatus(RegistryStatusConstants registryStatus) {
    this.registryStatus = registryStatus;
  }

  public DomainRestore nameServers(List<NameServer> nameServers) {
    this.nameServers = nameServers;
    return this;
  }

  public DomainRestore addNameServersItem(NameServer nameServersItem) {
    if (this.nameServers == null) {
      this.nameServers = new ArrayList<NameServer>();
    }
    this.nameServers.add(nameServersItem);
    return this;
  }

   /**
   * The nameservers.
   * @return nameServers
  **/
  @Valid
  @ApiModelProperty(value = "The nameservers.")
  public List<NameServer> getNameServers() {
    return nameServers;
  }

  public void setNameServers(List<NameServer> nameServers) {
    this.nameServers = nameServers;
  }

  public DomainRestore nameServerEntries(List<String> nameServerEntries) {
    this.nameServerEntries = nameServerEntries;
    return this;
  }

  public DomainRestore addNameServerEntriesItem(String nameServerEntriesItem) {
    if (this.nameServerEntries == null) {
      this.nameServerEntries = new ArrayList<String>();
    }
    this.nameServerEntries.add(nameServerEntriesItem);
    return this;
  }

   /**
   * NSentry is only be provided for .DE. If NSentry is used, nameServers is not allowed.
   * @return nameServerEntries
  **/
  @ApiModelProperty(value = "NSentry is only be provided for .DE. If NSentry is used, nameServers is not allowed.")
  public List<String> getNameServerEntries() {
    return nameServerEntries;
  }

  public void setNameServerEntries(List<String> nameServerEntries) {
    this.nameServerEntries = nameServerEntries;
  }

  public DomainRestore period(TimePeriod period) {
    this.period = period;
    return this;
  }

   /**
   * The renew period in years.
   * @return period
  **/
  @Valid
  @ApiModelProperty(value = "The renew period in years.")
  public TimePeriod getPeriod() {
    return period;
  }

  public void setPeriod(TimePeriod period) {
    this.period = period;
  }

  public DomainRestore trustee(Boolean trustee) {
    this.trustee = trustee;
    return this;
  }

   /**
   * Enable trustee service for the domain.
   * @return trustee
  **/
  @ApiModelProperty(value = "Enable trustee service for the domain.")
  public Boolean isTrustee() {
    return trustee;
  }

  public void setTrustee(Boolean trustee) {
    this.trustee = trustee;
  }

  public DomainRestore privacy(Boolean privacy) {
    this.privacy = privacy;
    return this;
  }

   /**
   * Enable privacy service for the domain.
   * @return privacy
  **/
  @ApiModelProperty(value = "Enable privacy service for the domain.")
  public Boolean isPrivacy() {
    return privacy;
  }

  public void setPrivacy(Boolean privacy) {
    this.privacy = privacy;
  }

  public DomainRestore authinfo(String authinfo) {
    this.authinfo = authinfo;
    return this;
  }

   /**
   * The authinfo.
   * @return authinfo
  **/
  @ApiModelProperty(value = "The authinfo.")
  public String getAuthinfo() {
    return authinfo;
  }

  public void setAuthinfo(String authinfo) {
    this.authinfo = authinfo;
  }

  public DomainRestore domainsafe(Boolean domainsafe) {
    this.domainsafe = domainsafe;
    return this;
  }

   /**
   * Enable domainsafe.
   * @return domainsafe
  **/
  @ApiModelProperty(value = "Enable domainsafe.")
  public Boolean isDomainsafe() {
    return domainsafe;
  }

  public void setDomainsafe(Boolean domainsafe) {
    this.domainsafe = domainsafe;
  }

  public DomainRestore parking(ParkingProviderConstants parking) {
    this.parking = parking;
    return this;
  }

   /**
   * The parking provider.
   * @return parking
  **/
  @Valid
  @ApiModelProperty(value = "The parking provider.")
  public ParkingProviderConstants getParking() {
    return parking;
  }

  public void setParking(ParkingProviderConstants parking) {
    this.parking = parking;
  }

  public DomainRestore extensions(DomainExtensions extensions) {
    this.extensions = extensions;
    return this;
  }

   /**
   * The domain extensions.
   * @return extensions
  **/
  @Valid
  @ApiModelProperty(value = "The domain extensions.")
  public DomainExtensions getExtensions() {
    return extensions;
  }

  public void setExtensions(DomainExtensions extensions) {
    this.extensions = extensions;
  }

  public DomainRestore logId(Long logId) {
    this.logId = logId;
    return this;
  }

   /**
   * The logId
   * @return logId
  **/
  @ApiModelProperty(value = "The logId")
  public Long getLogId() {
    return logId;
  }

  public void setLogId(Long logId) {
    this.logId = logId;
  }

  public DomainRestore nsCheck(DNSCheck nsCheck) {
    this.nsCheck = nsCheck;
    return this;
  }

   /**
   * An additional nameserver check will be carried out.
   * @return nsCheck
  **/
  @Valid
  @ApiModelProperty(value = "An additional nameserver check will be carried out.")
  public DNSCheck getNsCheck() {
    return nsCheck;
  }

  public void setNsCheck(DNSCheck nsCheck) {
    this.nsCheck = nsCheck;
  }

  public DomainRestore confirmOrder(Boolean confirmOrder) {
    this.confirmOrder = confirmOrder;
    return this;
  }

   /**
   * Some TLDs require a confirmation of the ‚ÄúTerms and Conditions of Registration.
   * @return confirmOrder
  **/
  @ApiModelProperty(value = "Some TLDs require a confirmation of the ‚ÄúTerms and Conditions of Registration.")
  public Boolean isConfirmOrder() {
    return confirmOrder;
  }

  public void setConfirmOrder(Boolean confirmOrder) {
    this.confirmOrder = confirmOrder;
  }

  public DomainRestore confirmOwnerConsent(Boolean confirmOwnerConsent) {
    this.confirmOwnerConsent = confirmOwnerConsent;
    return this;
  }

   /**
   * Confirms the consent of the domainowner for the changes. Required for gTLDs and new gTLDs when changing the name, the email address or the organization of the domain owner.
   * @return confirmOwnerConsent
  **/
  @ApiModelProperty(value = "Confirms the consent of the domainowner for the changes. Required for gTLDs and new gTLDs when changing the name, the email address or the organization of the domain owner.")
  public Boolean isConfirmOwnerConsent() {
    return confirmOwnerConsent;
  }

  public void setConfirmOwnerConsent(Boolean confirmOwnerConsent) {
    this.confirmOwnerConsent = confirmOwnerConsent;
  }

  public DomainRestore ignoreWhois(Boolean ignoreWhois) {
    this.ignoreWhois = ignoreWhois;
    return this;
  }

   /**
   * Ignore whois.
   * @return ignoreWhois
  **/
  @ApiModelProperty(value = "Ignore whois.")
  public Boolean isIgnoreWhois() {
    return ignoreWhois;
  }

  public void setIgnoreWhois(Boolean ignoreWhois) {
    this.ignoreWhois = ignoreWhois;
  }

  public DomainRestore comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * A custom field. Can only be updated via PUT /domain/{name}/_comment. Requires appropriate ACLs.
   * @return comment
  **/
  @ApiModelProperty(value = "A custom field. Can only be updated via PUT /domain/{name}/_comment. Requires appropriate ACLs.")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public DomainRestore includeWWW(Boolean includeWWW) {
    this.includeWWW = includeWWW;
    return this;
  }

   /**
   * Enable utomatic creation of the www subdomain.
   * @return includeWWW
  **/
  @ApiModelProperty(value = "Enable utomatic creation of the www subdomain.")
  public Boolean isIncludeWWW() {
    return includeWWW;
  }

  public void setIncludeWWW(Boolean includeWWW) {
    this.includeWWW = includeWWW;
  }

  public DomainRestore includeWildcard(Boolean includeWildcard) {
    this.includeWildcard = includeWildcard;
    return this;
  }

   /**
   * Enable include wildcard.
   * @return includeWildcard
  **/
  @ApiModelProperty(value = "Enable include wildcard.")
  public Boolean isIncludeWildcard() {
    return includeWildcard;
  }

  public void setIncludeWildcard(Boolean includeWildcard) {
    this.includeWildcard = includeWildcard;
  }

  public DomainRestore registrarStatus(RegistryStatusConstants registrarStatus) {
    this.registrarStatus = registrarStatus;
    return this;
  }

   /**
   * The registrar status.
   * @return registrarStatus
  **/
  @Valid
  @ApiModelProperty(value = "The registrar status.")
  public RegistryStatusConstants getRegistrarStatus() {
    return registrarStatus;
  }

  public void setRegistrarStatus(RegistryStatusConstants registrarStatus) {
    this.registrarStatus = registrarStatus;
  }

  public DomainRestore registrarStatusReason(String registrarStatusReason) {
    this.registrarStatusReason = registrarStatusReason;
    return this;
  }

   /**
   * The registrar status reason.
   * @return registrarStatusReason
  **/
  @ApiModelProperty(value = "The registrar status reason.")
  public String getRegistrarStatusReason() {
    return registrarStatusReason;
  }

  public void setRegistrarStatusReason(String registrarStatusReason) {
    this.registrarStatusReason = registrarStatusReason;
  }

  public DomainRestore removeCancelation(Boolean removeCancelation) {
    this.removeCancelation = removeCancelation;
    return this;
  }

   /**
   * Remove cancelation.
   * @return removeCancelation
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Remove cancelation.")
  public Boolean isRemoveCancelation() {
    return removeCancelation;
  }

  public void setRemoveCancelation(Boolean removeCancelation) {
    this.removeCancelation = removeCancelation;
  }

  public DomainRestore autodnsSecJob(DNSSecJob autodnsSecJob) {
    this.autodnsSecJob = autodnsSecJob;
    return this;
  }

   /**
   * AutodnsSecJob
   * @return autodnsSecJob
  **/
  @Valid
  @ApiModelProperty(value = "AutodnsSecJob")
  public DNSSecJob getAutodnsSecJob() {
    return autodnsSecJob;
  }

  public void setAutodnsSecJob(DNSSecJob autodnsSecJob) {
    this.autodnsSecJob = autodnsSecJob;
  }

  public DomainRestore priceClass(String priceClass) {
    this.priceClass = priceClass;
    return this;
  }

   /**
   * The priceclass for the registration of the domain.
   * @return priceClass
  **/
  @ApiModelProperty(value = "The priceclass for the registration of the domain.")
  public String getPriceClass() {
    return priceClass;
  }

  public void setPriceClass(String priceClass) {
    this.priceClass = priceClass;
  }

  public DomainRestore priceClassRenew(String priceClassRenew) {
    this.priceClassRenew = priceClassRenew;
    return this;
  }

   /**
   * The priceclass for the renew of the domain.
   * @return priceClassRenew
  **/
  @ApiModelProperty(value = "The priceclass for the renew of the domain.")
  public String getPriceClassRenew() {
    return priceClassRenew;
  }

  public void setPriceClassRenew(String priceClassRenew) {
    this.priceClassRenew = priceClassRenew;
  }

  public DomainRestore abuseEmail(String abuseEmail) {
    this.abuseEmail = abuseEmail;
    return this;
  }

   /**
   * The abuse email.
   * @return abuseEmail
  **/
  @ApiModelProperty(value = "The abuse email.")
  public String getAbuseEmail() {
    return abuseEmail;
  }

  public void setAbuseEmail(String abuseEmail) {
    this.abuseEmail = abuseEmail;
  }

  public DomainRestore generalRequestEmail(String generalRequestEmail) {
    this.generalRequestEmail = generalRequestEmail;
    return this;
  }

   /**
   * The general request mail.
   * @return generalRequestEmail
  **/
  @ApiModelProperty(value = "The general request mail.")
  public String getGeneralRequestEmail() {
    return generalRequestEmail;
  }

  public void setGeneralRequestEmail(String generalRequestEmail) {
    this.generalRequestEmail = generalRequestEmail;
  }

  public DomainRestore privacyPlusMail(String privacyPlusMail) {
    this.privacyPlusMail = privacyPlusMail;
    return this;
  }

   /**
   * The privacy plus mail.
   * @return privacyPlusMail
  **/
  @ApiModelProperty(value = "The privacy plus mail.")
  public String getPrivacyPlusMail() {
    return privacyPlusMail;
  }

  public void setPrivacyPlusMail(String privacyPlusMail) {
    this.privacyPlusMail = privacyPlusMail;
  }

  public DomainRestore privacyPlus(Boolean privacyPlus) {
    this.privacyPlus = privacyPlus;
    return this;
  }

   /**
   * Enable privacy plus.
   * @return privacyPlus
  **/
  @ApiModelProperty(value = "Enable privacy plus.")
  public Boolean isPrivacyPlus() {
    return privacyPlus;
  }

  public void setPrivacyPlus(Boolean privacyPlus) {
    this.privacyPlus = privacyPlus;
  }

  public DomainRestore nameServerGroup(String nameServerGroup) {
    this.nameServerGroup = nameServerGroup;
    return this;
  }

   /**
   * The nameserver group.
   * @return nameServerGroup
  **/
  @ApiModelProperty(value = "The nameserver group.")
  public String getNameServerGroup() {
    return nameServerGroup;
  }

  public void setNameServerGroup(String nameServerGroup) {
    this.nameServerGroup = nameServerGroup;
  }

  public DomainRestore rddsOptIn(RddsOptInConstants rddsOptIn) {
    this.rddsOptIn = rddsOptIn;
    return this;
  }

   /**
   * Enables the whois output to show redacted contacts.
   * @return rddsOptIn
  **/
  @Valid
  @ApiModelProperty(value = "Enables the whois output to show redacted contacts.")
  public RddsOptInConstants getRddsOptIn() {
    return rddsOptIn;
  }

  public void setRddsOptIn(RddsOptInConstants rddsOptIn) {
    this.rddsOptIn = rddsOptIn;
  }

  public DomainRestore servicesAdd(DomainServices servicesAdd) {
    this.servicesAdd = servicesAdd;
    return this;
  }

   /**
   * Adds pending services like BackupMX and MailProxy.
   * @return servicesAdd
  **/
  @Valid
  @ApiModelProperty(value = "Adds pending services like BackupMX and MailProxy.")
  public DomainServices getServicesAdd() {
    return servicesAdd;
  }

  public void setServicesAdd(DomainServices servicesAdd) {
    this.servicesAdd = servicesAdd;
  }

  public DomainRestore servicesRem(DomainServices servicesRem) {
    this.servicesRem = servicesRem;
    return this;
  }

   /**
   * Removes pending services like BackupMX and MailProxy.
   * @return servicesRem
  **/
  @Valid
  @ApiModelProperty(value = "Removes pending services like BackupMX and MailProxy.")
  public DomainServices getServicesRem() {
    return servicesRem;
  }

  public void setServicesRem(DomainServices servicesRem) {
    this.servicesRem = servicesRem;
  }

  public DomainRestore deleted(Date deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * The date at deletion of the domain
   * @return deleted
  **/
  @Valid
  @ApiModelProperty(value = "The date at deletion of the domain")
  public Date getDeleted() {
    return deleted;
  }

  public void setDeleted(Date deleted) {
    this.deleted = deleted;
  }

  public DomainRestore restorePhaseEnd(Date restorePhaseEnd) {
    this.restorePhaseEnd = restorePhaseEnd;
    return this;
  }

   /**
   * The end of current restore phase
   * @return restorePhaseEnd
  **/
  @Valid
  @ApiModelProperty(value = "The end of current restore phase")
  public Date getRestorePhaseEnd() {
    return restorePhaseEnd;
  }

  public void setRestorePhaseEnd(Date restorePhaseEnd) {
    this.restorePhaseEnd = restorePhaseEnd;
  }

  public DomainRestore ownerc(Contact ownerc) {
    this.ownerc = ownerc;
    return this;
  }

   /**
   * The owner contact.
   * @return ownerc
  **/
  @Valid
  @ApiModelProperty(value = "The owner contact.")
  public Contact getOwnerc() {
    return ownerc;
  }

  public void setOwnerc(Contact ownerc) {
    this.ownerc = ownerc;
  }

  public DomainRestore adminc(Contact adminc) {
    this.adminc = adminc;
    return this;
  }

   /**
   * The administrative contact.
   * @return adminc
  **/
  @Valid
  @ApiModelProperty(value = "The administrative contact.")
  public Contact getAdminc() {
    return adminc;
  }

  public void setAdminc(Contact adminc) {
    this.adminc = adminc;
  }

  public DomainRestore techc(Contact techc) {
    this.techc = techc;
    return this;
  }

   /**
   * The technical contact reference.
   * @return techc
  **/
  @Valid
  @ApiModelProperty(value = "The technical contact reference.")
  public Contact getTechc() {
    return techc;
  }

  public void setTechc(Contact techc) {
    this.techc = techc;
  }

  public DomainRestore zonec(Contact zonec) {
    this.zonec = zonec;
    return this;
  }

   /**
   * The dns contact.
   * @return zonec
  **/
  @Valid
  @ApiModelProperty(value = "The dns contact.")
  public Contact getZonec() {
    return zonec;
  }

  public void setZonec(Contact zonec) {
    this.zonec = zonec;
  }

  public DomainRestore expire(Date expire) {
    this.expire = expire;
    return this;
  }

   /**
   * The expire date of the domain.
   * @return expire
  **/
  @Valid
  @ApiModelProperty(value = "The expire date of the domain.")
  public Date getExpire() {
    return expire;
  }

  public void setExpire(Date expire) {
    this.expire = expire;
  }

  public DomainRestore payable(Date payable) {
    this.payable = payable;
    return this;
  }

   /**
   * The payable date of the domain.
   * @return payable
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The payable date of the domain.")
  public Date getPayable() {
    return payable;
  }

  public void setPayable(Date payable) {
    this.payable = payable;
  }

  public DomainRestore action(DomainActionConstants action) {
    this.action = action;
    return this;
  }

   /**
   * The last action.
   * @return action
  **/
  @Valid
  @ApiModelProperty(value = "The last action.")
  public DomainActionConstants getAction() {
    return action;
  }

  public void setAction(DomainActionConstants action) {
    this.action = action;
  }

  public DomainRestore autoDnssec(Boolean autoDnssec) {
    this.autoDnssec = autoDnssec;
    return this;
  }

   /**
   * Enables or disables automatic DNSSEC for certain name servers (e.g. NodeSecure).
   * @return autoDnssec
  **/
  @ApiModelProperty(value = "Enables or disables automatic DNSSEC for certain name servers (e.g. NodeSecure).")
  public Boolean isAutoDnssec() {
    return autoDnssec;
  }

  public void setAutoDnssec(Boolean autoDnssec) {
    this.autoDnssec = autoDnssec;
  }

  public DomainRestore dnssec(Boolean dnssec) {
    this.dnssec = dnssec;
    return this;
  }

   /**
   * Indicates whether DNSSEC is enabled for the domain or not.
   * @return dnssec
  **/
  @ApiModelProperty(value = "Indicates whether DNSSEC is enabled for the domain or not.")
  public Boolean isDnssec() {
    return dnssec;
  }

  public void setDnssec(Boolean dnssec) {
    this.dnssec = dnssec;
  }

  public DomainRestore validCertificate(Boolean validCertificate) {
    this.validCertificate = validCertificate;
    return this;
  }

   /**
   * Domain has an matching certificate.
   * @return validCertificate
  **/
  @ApiModelProperty(value = "Domain has an matching certificate.")
  public Boolean isValidCertificate() {
    return validCertificate;
  }

  public void setValidCertificate(Boolean validCertificate) {
    this.validCertificate = validCertificate;
  }

  public DomainRestore cancelationStatus(CancelationStatusConstants cancelationStatus) {
    this.cancelationStatus = cancelationStatus;
    return this;
  }

   /**
   * The cancelation status.
   * @return cancelationStatus
  **/
  @Valid
  @ApiModelProperty(value = "The cancelation status.")
  public CancelationStatusConstants getCancelationStatus() {
    return cancelationStatus;
  }

  public void setCancelationStatus(CancelationStatusConstants cancelationStatus) {
    this.cancelationStatus = cancelationStatus;
  }

  public DomainRestore autoRenewStatus(AutoRenewStatusConstants autoRenewStatus) {
    this.autoRenewStatus = autoRenewStatus;
    return this;
  }

   /**
   * The autorenew status.
   * @return autoRenewStatus
  **/
  @Valid
  @ApiModelProperty(value = "The autorenew status.")
  public AutoRenewStatusConstants getAutoRenewStatus() {
    return autoRenewStatus;
  }

  public void setAutoRenewStatus(AutoRenewStatusConstants autoRenewStatus) {
    this.autoRenewStatus = autoRenewStatus;
  }

  public DomainRestore dnssecData(List<DNSSec> dnssecData) {
    this.dnssecData = dnssecData;
    return this;
  }

  public DomainRestore addDnssecDataItem(DNSSec dnssecDataItem) {
    if (this.dnssecData == null) {
      this.dnssecData = new ArrayList<DNSSec>();
    }
    this.dnssecData.add(dnssecDataItem);
    return this;
  }

   /**
   * Submits the key material to the registry. If the list is empty, the key material is deleted at the registry. If the key is omitted during an update, the data is retained.
   * @return dnssecData
  **/
  @Valid
  @ApiModelProperty(value = "Submits the key material to the registry. If the list is empty, the key material is deleted at the registry. If the key is omitted during an update, the data is retained.")
  public List<DNSSec> getDnssecData() {
    return dnssecData;
  }

  public void setDnssecData(List<DNSSec> dnssecData) {
    this.dnssecData = dnssecData;
  }

  public DomainRestore zone(Zone zone) {
    this.zone = zone;
    return this;
  }

   /**
   * The zone to create.
   * @return zone
  **/
  @Valid
  @ApiModelProperty(value = "The zone to create.")
  public Zone getZone() {
    return zone;
  }

  public void setZone(Zone zone) {
    this.zone = zone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainRestore domainRestore = (DomainRestore) o;
    return Objects.equals(this.created, domainRestore.created) &&
        Objects.equals(this.updated, domainRestore.updated) &&
        Objects.equals(this.owner, domainRestore.owner) &&
        Objects.equals(this.updater, domainRestore.updater) &&
        Objects.equals(this.name, domainRestore.name) &&
        Objects.equals(this.idn, domainRestore.idn) &&
        Objects.equals(this.nicMemberLabel, domainRestore.nicMemberLabel) &&
        Objects.equals(this.registryStatus, domainRestore.registryStatus) &&
        Objects.equals(this.nameServers, domainRestore.nameServers) &&
        Objects.equals(this.nameServerEntries, domainRestore.nameServerEntries) &&
        Objects.equals(this.period, domainRestore.period) &&
        Objects.equals(this.trustee, domainRestore.trustee) &&
        Objects.equals(this.privacy, domainRestore.privacy) &&
        Objects.equals(this.authinfo, domainRestore.authinfo) &&
        Objects.equals(this.domainsafe, domainRestore.domainsafe) &&
        Objects.equals(this.parking, domainRestore.parking) &&
        Objects.equals(this.extensions, domainRestore.extensions) &&
        Objects.equals(this.logId, domainRestore.logId) &&
        Objects.equals(this.nsCheck, domainRestore.nsCheck) &&
        Objects.equals(this.confirmOrder, domainRestore.confirmOrder) &&
        Objects.equals(this.confirmOwnerConsent, domainRestore.confirmOwnerConsent) &&
        Objects.equals(this.ignoreWhois, domainRestore.ignoreWhois) &&
        Objects.equals(this.comment, domainRestore.comment) &&
        Objects.equals(this.includeWWW, domainRestore.includeWWW) &&
        Objects.equals(this.includeWildcard, domainRestore.includeWildcard) &&
        Objects.equals(this.registrarStatus, domainRestore.registrarStatus) &&
        Objects.equals(this.registrarStatusReason, domainRestore.registrarStatusReason) &&
        Objects.equals(this.removeCancelation, domainRestore.removeCancelation) &&
        Objects.equals(this.autodnsSecJob, domainRestore.autodnsSecJob) &&
        Objects.equals(this.priceClass, domainRestore.priceClass) &&
        Objects.equals(this.priceClassRenew, domainRestore.priceClassRenew) &&
        Objects.equals(this.abuseEmail, domainRestore.abuseEmail) &&
        Objects.equals(this.generalRequestEmail, domainRestore.generalRequestEmail) &&
        Objects.equals(this.privacyPlusMail, domainRestore.privacyPlusMail) &&
        Objects.equals(this.privacyPlus, domainRestore.privacyPlus) &&
        Objects.equals(this.nameServerGroup, domainRestore.nameServerGroup) &&
        Objects.equals(this.rddsOptIn, domainRestore.rddsOptIn) &&
        Objects.equals(this.servicesAdd, domainRestore.servicesAdd) &&
        Objects.equals(this.servicesRem, domainRestore.servicesRem) &&
        Objects.equals(this.deleted, domainRestore.deleted) &&
        Objects.equals(this.restorePhaseEnd, domainRestore.restorePhaseEnd) &&
        Objects.equals(this.ownerc, domainRestore.ownerc) &&
        Objects.equals(this.adminc, domainRestore.adminc) &&
        Objects.equals(this.techc, domainRestore.techc) &&
        Objects.equals(this.zonec, domainRestore.zonec) &&
        Objects.equals(this.expire, domainRestore.expire) &&
        Objects.equals(this.payable, domainRestore.payable) &&
        Objects.equals(this.action, domainRestore.action) &&
        Objects.equals(this.autoDnssec, domainRestore.autoDnssec) &&
        Objects.equals(this.dnssec, domainRestore.dnssec) &&
        Objects.equals(this.validCertificate, domainRestore.validCertificate) &&
        Objects.equals(this.cancelationStatus, domainRestore.cancelationStatus) &&
        Objects.equals(this.autoRenewStatus, domainRestore.autoRenewStatus) &&
        Objects.equals(this.dnssecData, domainRestore.dnssecData) &&
        Objects.equals(this.zone, domainRestore.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, owner, updater, name, idn, nicMemberLabel, registryStatus, nameServers, nameServerEntries, period, trustee, privacy, authinfo, domainsafe, parking, extensions, logId, nsCheck, confirmOrder, confirmOwnerConsent, ignoreWhois, comment, includeWWW, includeWildcard, registrarStatus, registrarStatusReason, removeCancelation, autodnsSecJob, priceClass, priceClassRenew, abuseEmail, generalRequestEmail, privacyPlusMail, privacyPlus, nameServerGroup, rddsOptIn, servicesAdd, servicesRem, deleted, restorePhaseEnd, ownerc, adminc, techc, zonec, expire, payable, action, autoDnssec, dnssec, validCertificate, cancelationStatus, autoRenewStatus, dnssecData, zone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainRestore {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    idn: ").append(toIndentedString(idn)).append("\n");
    sb.append("    nicMemberLabel: ").append(toIndentedString(nicMemberLabel)).append("\n");
    sb.append("    registryStatus: ").append(toIndentedString(registryStatus)).append("\n");
    sb.append("    nameServers: ").append(toIndentedString(nameServers)).append("\n");
    sb.append("    nameServerEntries: ").append(toIndentedString(nameServerEntries)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    trustee: ").append(toIndentedString(trustee)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    authinfo: ").append(toIndentedString(authinfo)).append("\n");
    sb.append("    domainsafe: ").append(toIndentedString(domainsafe)).append("\n");
    sb.append("    parking: ").append(toIndentedString(parking)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    logId: ").append(toIndentedString(logId)).append("\n");
    sb.append("    nsCheck: ").append(toIndentedString(nsCheck)).append("\n");
    sb.append("    confirmOrder: ").append(toIndentedString(confirmOrder)).append("\n");
    sb.append("    confirmOwnerConsent: ").append(toIndentedString(confirmOwnerConsent)).append("\n");
    sb.append("    ignoreWhois: ").append(toIndentedString(ignoreWhois)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    includeWWW: ").append(toIndentedString(includeWWW)).append("\n");
    sb.append("    includeWildcard: ").append(toIndentedString(includeWildcard)).append("\n");
    sb.append("    registrarStatus: ").append(toIndentedString(registrarStatus)).append("\n");
    sb.append("    registrarStatusReason: ").append(toIndentedString(registrarStatusReason)).append("\n");
    sb.append("    removeCancelation: ").append(toIndentedString(removeCancelation)).append("\n");
    sb.append("    autodnsSecJob: ").append(toIndentedString(autodnsSecJob)).append("\n");
    sb.append("    priceClass: ").append(toIndentedString(priceClass)).append("\n");
    sb.append("    priceClassRenew: ").append(toIndentedString(priceClassRenew)).append("\n");
    sb.append("    abuseEmail: ").append(toIndentedString(abuseEmail)).append("\n");
    sb.append("    generalRequestEmail: ").append(toIndentedString(generalRequestEmail)).append("\n");
    sb.append("    privacyPlusMail: ").append(toIndentedString(privacyPlusMail)).append("\n");
    sb.append("    privacyPlus: ").append(toIndentedString(privacyPlus)).append("\n");
    sb.append("    nameServerGroup: ").append(toIndentedString(nameServerGroup)).append("\n");
    sb.append("    rddsOptIn: ").append(toIndentedString(rddsOptIn)).append("\n");
    sb.append("    servicesAdd: ").append(toIndentedString(servicesAdd)).append("\n");
    sb.append("    servicesRem: ").append(toIndentedString(servicesRem)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    restorePhaseEnd: ").append(toIndentedString(restorePhaseEnd)).append("\n");
    sb.append("    ownerc: ").append(toIndentedString(ownerc)).append("\n");
    sb.append("    adminc: ").append(toIndentedString(adminc)).append("\n");
    sb.append("    techc: ").append(toIndentedString(techc)).append("\n");
    sb.append("    zonec: ").append(toIndentedString(zonec)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    payable: ").append(toIndentedString(payable)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    autoDnssec: ").append(toIndentedString(autoDnssec)).append("\n");
    sb.append("    dnssec: ").append(toIndentedString(dnssec)).append("\n");
    sb.append("    validCertificate: ").append(toIndentedString(validCertificate)).append("\n");
    sb.append("    cancelationStatus: ").append(toIndentedString(cancelationStatus)).append("\n");
    sb.append("    autoRenewStatus: ").append(toIndentedString(autoRenewStatus)).append("\n");
    sb.append("    dnssecData: ").append(toIndentedString(dnssecData)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

