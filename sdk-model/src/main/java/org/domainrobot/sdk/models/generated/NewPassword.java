/*
 * Domainrobot JSON API
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.domainrobot.sdk.models.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * NewPassword
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-13T09:53:42.259+01:00")
public class NewPassword {
  @JsonProperty("user")
  private String user = null;

  @JsonProperty("context")
  private Integer context = null;

  @JsonProperty("tan")
  private String tan = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("mobile")
  private String mobile = null;

  @JsonProperty("tanMethods")
  private List<String> tanMethods = null;

  @JsonProperty("token")
  private String token = null;

  @JsonProperty("method")
  private String method = null;

  public NewPassword user(String user) {
    this.user = user;
    return this;
  }

   /**
   * The user
   * @return user
  **/
  @ApiModelProperty(example = "hello@world.com", value = "The user")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public NewPassword context(Integer context) {
    this.context = context;
    return this;
  }

   /**
   * The context of the user
   * @return context
  **/
  @ApiModelProperty(example = "4", value = "The context of the user")
  public Integer getContext() {
    return context;
  }

  public void setContext(Integer context) {
    this.context = context;
  }

  public NewPassword tan(String tan) {
    this.tan = tan;
    return this;
  }

   /**
   * The tan
   * @return tan
  **/
  @ApiModelProperty(example = "123456", value = "The tan")
  public String getTan() {
    return tan;
  }

  public void setTan(String tan) {
    this.tan = tan;
  }

  public NewPassword password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password
   * @return password
  **/
  @ApiModelProperty(example = "wd23os", value = "The password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public NewPassword email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The disguised email to which the TAN is to be sent.
   * @return email
  **/
  @ApiModelProperty(value = "The disguised email to which the TAN is to be sent.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public NewPassword mobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

   /**
   * The disguised mobilephone number to which the TAN is to be sent.
   * @return mobile
  **/
  @ApiModelProperty(value = "The disguised mobilephone number to which the TAN is to be sent.")
  public String getMobile() {
    return mobile;
  }

  public void setMobile(String mobile) {
    this.mobile = mobile;
  }

  public NewPassword tanMethods(List<String> tanMethods) {
    this.tanMethods = tanMethods;
    return this;
  }

  public NewPassword addTanMethodsItem(String tanMethodsItem) {
    if (this.tanMethods == null) {
      this.tanMethods = new ArrayList<String>();
    }
    this.tanMethods.add(tanMethodsItem);
    return this;
  }

   /**
   * The tan methods available for the user
   * @return tanMethods
  **/
  @ApiModelProperty(example = "\"METHOD_EMAIL, METHOD_MOBILE, METHOD_2FA\"", value = "The tan methods available for the user")
  public List<String> getTanMethods() {
    return tanMethods;
  }

  public void setTanMethods(List<String> tanMethods) {
    this.tanMethods = tanMethods;
  }

  public NewPassword token(String token) {
    this.token = token;
    return this;
  }

   /**
   * The token
   * @return token
  **/
  @ApiModelProperty(value = "The token")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public NewPassword method(String method) {
    this.method = method;
    return this;
  }

   /**
   * The selected method
   * @return method
  **/
  @ApiModelProperty(value = "The selected method")
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewPassword newPassword = (NewPassword) o;
    return Objects.equals(this.user, newPassword.user) &&
        Objects.equals(this.context, newPassword.context) &&
        Objects.equals(this.tan, newPassword.tan) &&
        Objects.equals(this.password, newPassword.password) &&
        Objects.equals(this.email, newPassword.email) &&
        Objects.equals(this.mobile, newPassword.mobile) &&
        Objects.equals(this.tanMethods, newPassword.tanMethods) &&
        Objects.equals(this.token, newPassword.token) &&
        Objects.equals(this.method, newPassword.method);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, context, tan, password, email, mobile, tanMethods, token, method);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewPassword {\n");
    
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    tan: ").append(toIndentedString(tan)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    tanMethods: ").append(toIndentedString(tanMethods)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

